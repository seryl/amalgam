# Kubernetes core v1 types
{
  AWSElasticBlockStoreVolumeSource = (import "./awselasticblockstorevolumesource.ncl").AWSElasticBlockStoreVolumeSource,
  EnvFromSource = (import "./envfromsource.ncl").EnvFromSource,
  PersistentVolumeClaimList = (import "./persistentvolumeclaimlist.ncl").PersistentVolumeClaimList,
  NodeCondition = (import "./nodecondition.ncl").NodeCondition,
  Affinity = (import "./affinity.ncl").Affinity,
  PodDNSConfigOption = (import "./poddnsconfigoption.ncl").PodDNSConfigOption,
  ScaleStatus = (import "./scalestatus.ncl").ScaleStatus,
  HTTPIngressPath = (import "./httpingresspath.ncl").HTTPIngressPath,
  JobSpec = (import "./jobspec.ncl").JobSpec,
  NetworkPolicy = (import "./networkpolicy.ncl").NetworkPolicy,
  CrossVersionObjectReference = (import "./crossversionobjectreference.ncl").CrossVersionObjectReference,
  RBDVolumeSource = (import "./rbdvolumesource.ncl").RBDVolumeSource,
  CSIDriverList = (import "./csidriverlist.ncl").CSIDriverList,
  GroupVersionForDiscovery = (import "./groupversionfordiscovery.ncl").GroupVersionForDiscovery,
  ListMeta = (import "./listmeta.ncl").ListMeta,
  Binding = (import "./binding.ncl").Binding,
  EventList = (import "./eventlist.ncl").EventList,
  ServiceBackendPort = (import "./servicebackendport.ncl").ServiceBackendPort,
  PersistentVolume = (import "./persistentvolume.ncl").PersistentVolume,
  VolumeAttachmentSource = (import "./volumeattachmentsource.ncl").VolumeAttachmentSource,
  RollingUpdateDeployment = (import "./rollingupdatedeployment.ncl").RollingUpdateDeployment,
  DaemonSetStatus = (import "./daemonsetstatus.ncl").DaemonSetStatus,
  PodIP = (import "./podip.ncl").PodIP,
  SecurityContext = (import "./securitycontext.ncl").SecurityContext,
  EnvVar = (import "./envvar.ncl").EnvVar,
  EphemeralVolumeSource = (import "./ephemeralvolumesource.ncl").EphemeralVolumeSource,
  SecretList = (import "./secretlist.ncl").SecretList,
  ObjectFieldSelector = (import "./objectfieldselector.ncl").ObjectFieldSelector,
  LabelSelector = (import "./labelselector.ncl").LabelSelector,
  EventSeries = (import "./eventseries.ncl").EventSeries,
  LimitRangeItem = (import "./limitrangeitem.ncl").LimitRangeItem,
  PersistentVolumeClaimCondition = (import "./persistentvolumeclaimcondition.ncl").PersistentVolumeClaimCondition,
  ResourceFieldSelector = (import "./resourcefieldselector.ncl").ResourceFieldSelector,
  ServiceList = (import "./servicelist.ncl").ServiceList,
  NodeSelector = (import "./nodeselector.ncl").NodeSelector,
  Namespace = (import "./namespace.ncl").Namespace,
  PodStatus = (import "./podstatus.ncl").PodStatus,
  SecretReference = (import "./secretreference.ncl").SecretReference,
  IngressList = (import "./ingresslist.ncl").IngressList,
  DownwardAPIProjection = (import "./downwardapiprojection.ncl").DownwardAPIProjection,
  ControllerRevision = (import "./controllerrevision.ncl").ControllerRevision,
  LoadBalancerIngress = (import "./loadbalanceringress.ncl").LoadBalancerIngress,
  LoadBalancerStatus = (import "./loadbalancerstatus.ncl").LoadBalancerStatus,
  CSIDriver = (import "./csidriver.ncl").CSIDriver,
  EnvVarSource = (import "./envvarsource.ncl").EnvVarSource,
  ReplicationControllerCondition = (import "./replicationcontrollercondition.ncl").ReplicationControllerCondition,
  NamespaceList = (import "./namespacelist.ncl").NamespaceList,
  ConfigMapNodeConfigSource = (import "./configmapnodeconfigsource.ncl").ConfigMapNodeConfigSource,
  SessionAffinityConfig = (import "./sessionaffinityconfig.ncl").SessionAffinityConfig,
  ConfigMapProjection = (import "./configmapprojection.ncl").ConfigMapProjection,
  StatefulSetList = (import "./statefulsetlist.ncl").StatefulSetList,
  Condition = (import "./condition.ncl").Condition,
  NodeSpec = (import "./nodespec.ncl").NodeSpec,
  OwnerReference = (import "./ownerreference.ncl").OwnerReference,
  PodDisruptionBudgetStatus = (import "./poddisruptionbudgetstatus.ncl").PodDisruptionBudgetStatus,
  TopologySelectorTerm = (import "./topologyselectorterm.ncl").TopologySelectorTerm,
  EndpointsList = (import "./endpointslist.ncl").EndpointsList,
  ResourceRequirements = (import "./resourcerequirements.ncl").ResourceRequirements,
  SecretProjection = (import "./secretprojection.ncl").SecretProjection,
  WindowsSecurityContextOptions = (import "./windowssecuritycontextoptions.ncl").WindowsSecurityContextOptions,
  NodeList = (import "./nodelist.ncl").NodeList,
  StorageOSVolumeSource = (import "./storageosvolumesource.ncl").StorageOSVolumeSource,
  RoleRef = (import "./roleref.ncl").RoleRef,
  JobCondition = (import "./jobcondition.ncl").JobCondition,
  ReplicationControllerSpec = (import "./replicationcontrollerspec.ncl").ReplicationControllerSpec,
  PodSpec = (import "./podspec.ncl").PodSpec,
  MicroTime = (import "./microtime.ncl").MicroTime,
  Pod = (import "./pod.ncl").Pod,
  PodSchedulingGate = (import "./podschedulinggate.ncl").PodSchedulingGate,
  StorageClass = (import "./storageclass.ncl").StorageClass,
  NodeAddress = (import "./nodeaddress.ncl").NodeAddress,
  LimitRangeSpec = (import "./limitrangespec.ncl").LimitRangeSpec,
  NodeConfigSource = (import "./nodeconfigsource.ncl").NodeConfigSource,
  PersistentVolumeClaimTemplate = (import "./persistentvolumeclaimtemplate.ncl").PersistentVolumeClaimTemplate,
  StorageClassList = (import "./storageclasslist.ncl").StorageClassList,
  ReplicaSetCondition = (import "./replicasetcondition.ncl").ReplicaSetCondition,
  ModifyVolumeStatus = (import "./modifyvolumestatus.ncl").ModifyVolumeStatus,
  DaemonSetCondition = (import "./daemonsetcondition.ncl").DaemonSetCondition,
  ScaleIOVolumeSource = (import "./scaleiovolumesource.ncl").ScaleIOVolumeSource,
  ServicePort = (import "./serviceport.ncl").ServicePort,
  PersistentVolumeClaim = (import "./persistentvolumeclaim.ncl").PersistentVolumeClaim,
  LimitRangeList = (import "./limitrangelist.ncl").LimitRangeList,
  ObjectMeta = (import "./objectmeta.ncl").ObjectMeta,
  LimitRange = (import "./limitrange.ncl").LimitRange,
  APIResource = (import "./apiresource.ncl").APIResource,
  PodFailurePolicyRule = (import "./podfailurepolicyrule.ncl").PodFailurePolicyRule,
  NodeDaemonEndpoints = (import "./nodedaemonendpoints.ncl").NodeDaemonEndpoints,
  SecretKeySelector = (import "./secretkeyselector.ncl").SecretKeySelector,
  ConfigMap = (import "./configmap.ncl").ConfigMap,
  NodeFeatures = (import "./nodefeatures.ncl").NodeFeatures,
  IngressClassList = (import "./ingressclasslist.ncl").IngressClassList,
  IngressClass = (import "./ingressclass.ncl").IngressClass,
  ManagedFieldsEntry = (import "./managedfieldsentry.ncl").ManagedFieldsEntry,
  CronJobList = (import "./cronjoblist.ncl").CronJobList,
  ExecAction = (import "./execaction.ncl").ExecAction,
  VolumeResourceRequirements = (import "./volumeresourcerequirements.ncl").VolumeResourceRequirements,
  Time = (import "./time.ncl").Time,
  ControllerRevisionList = (import "./controllerrevisionlist.ncl").ControllerRevisionList,
  NodeSelectorRequirement = (import "./nodeselectorrequirement.ncl").NodeSelectorRequirement,
  ServiceAccount = (import "./serviceaccount.ncl").ServiceAccount,
  CinderPersistentVolumeSource = (import "./cinderpersistentvolumesource.ncl").CinderPersistentVolumeSource,
  Node = (import "./node.ncl").Node,
  NodeAffinity = (import "./nodeaffinity.ncl").NodeAffinity,
  StatusDetails = (import "./statusdetails.ncl").StatusDetails,
  FlockerVolumeSource = (import "./flockervolumesource.ncl").FlockerVolumeSource,
  DeploymentStrategy = (import "./deploymentstrategy.ncl").DeploymentStrategy,
  RollingUpdateDaemonSet = (import "./rollingupdatedaemonset.ncl").RollingUpdateDaemonSet,
  SuccessPolicyRule = (import "./successpolicyrule.ncl").SuccessPolicyRule,
  CinderVolumeSource = (import "./cindervolumesource.ncl").CinderVolumeSource,
  UncountedTerminatedPods = (import "./uncountedterminatedpods.ncl").UncountedTerminatedPods,
  Probe = (import "./probe.ncl").Probe,
  QuobyteVolumeSource = (import "./quobytevolumesource.ncl").QuobyteVolumeSource,
  AzureFilePersistentVolumeSource = (import "./azurefilepersistentvolumesource.ncl").AzureFilePersistentVolumeSource,
  SecretEnvSource = (import "./secretenvsource.ncl").SecretEnvSource,
  IPAddressSpec = (import "./ipaddressspec.ncl").IPAddressSpec,
  IngressServiceBackend = (import "./ingressservicebackend.ncl").IngressServiceBackend,
  Deployment = (import "./deployment.ncl").Deployment,
  LifecycleHandler = (import "./lifecyclehandler.ncl").LifecycleHandler,
  ServiceAccountList = (import "./serviceaccountlist.ncl").ServiceAccountList,
  EphemeralContainer = (import "./ephemeralcontainer.ncl").EphemeralContainer,
  ServiceSpec = (import "./servicespec.ncl").ServiceSpec,
  Capabilities = (import "./capabilities.ncl").Capabilities,
  PersistentVolumeClaimStatus = (import "./persistentvolumeclaimstatus.ncl").PersistentVolumeClaimStatus,
  StatefulSetOrdinals = (import "./statefulsetordinals.ncl").StatefulSetOrdinals,
  NetworkPolicySpec = (import "./networkpolicyspec.ncl").NetworkPolicySpec,
  JobList = (import "./joblist.ncl").JobList,
  ResourceClaim = (import "./resourceclaim.ncl").ResourceClaim,
  ResourceQuotaList = (import "./resourcequotalist.ncl").ResourceQuotaList,
  AppArmorProfile = (import "./apparmorprofile.ncl").AppArmorProfile,
  AzureFileVolumeSource = (import "./azurefilevolumesource.ncl").AzureFileVolumeSource,
  ConfigMapList = (import "./configmaplist.ncl").ConfigMapList,
  DownwardAPIVolumeSource = (import "./downwardapivolumesource.ncl").DownwardAPIVolumeSource,
  PersistentVolumeStatus = (import "./persistentvolumestatus.ncl").PersistentVolumeStatus,
  ContainerStateTerminated = (import "./containerstateterminated.ncl").ContainerStateTerminated,
  ScopeSelector = (import "./scopeselector.ncl").ScopeSelector,
  Volume = (import "./volume.ncl").Volume,
  ClusterRole = (import "./clusterrole.ncl").ClusterRole,
  TokenRequest = (import "./tokenrequest.ncl").TokenRequest,
  VolumeAttachmentList = (import "./volumeattachmentlist.ncl").VolumeAttachmentList,
  APIResourceList = (import "./apiresourcelist.ncl").APIResourceList,
  PhotonPersistentDiskVolumeSource = (import "./photonpersistentdiskvolumesource.ncl").PhotonPersistentDiskVolumeSource,
  Sysctl = (import "./sysctl.ncl").Sysctl,
  IPBlock = (import "./ipblock.ncl").IPBlock,
  FlexPersistentVolumeSource = (import "./flexpersistentvolumesource.ncl").FlexPersistentVolumeSource,
  Job = (import "./job.ncl").Job,
  GitRepoVolumeSource = (import "./gitrepovolumesource.ncl").GitRepoVolumeSource,
  ContainerImage = (import "./containerimage.ncl").ContainerImage,
  PodTemplateSpec = (import "./podtemplatespec.ncl").PodTemplateSpec,
  WatchEvent = (import "./watchevent.ncl").WatchEvent,
  ComponentCondition = (import "./componentcondition.ncl").ComponentCondition,
  Service = (import "./service.ncl").Service,
  PersistentVolumeSpec = (import "./persistentvolumespec.ncl").PersistentVolumeSpec,
  StatusCause = (import "./statuscause.ncl").StatusCause,
  PreferredSchedulingTerm = (import "./preferredschedulingterm.ncl").PreferredSchedulingTerm,
  HTTPHeader = (import "./httpheader.ncl").HTTPHeader,
  ClusterRoleList = (import "./clusterrolelist.ncl").ClusterRoleList,
  CronJobStatus = (import "./cronjobstatus.ncl").CronJobStatus,
  PodDisruptionBudgetList = (import "./poddisruptionbudgetlist.ncl").PodDisruptionBudgetList,
  FCVolumeSource = (import "./fcvolumesource.ncl").FCVolumeSource,
  LinuxContainerUser = (import "./linuxcontaineruser.ncl").LinuxContainerUser,
  DaemonSetUpdateStrategy = (import "./daemonsetupdatestrategy.ncl").DaemonSetUpdateStrategy,
  ClusterTrustBundleProjection = (import "./clustertrustbundleprojection.ncl").ClusterTrustBundleProjection,
  SELinuxOptions = (import "./selinuxoptions.ncl").SELinuxOptions,
  AttachedVolume = (import "./attachedvolume.ncl").AttachedVolume,
  Lifecycle = (import "./lifecycle.ncl").Lifecycle,
  DeploymentSpec = (import "./deploymentspec.ncl").DeploymentSpec,
  VolumeProjection = (import "./volumeprojection.ncl").VolumeProjection,
  Role = (import "./role.ncl").Role,
  ContainerStateRunning = (import "./containerstaterunning.ncl").ContainerStateRunning,
  HostIP = (import "./hostip.ncl").HostIP,
  ServiceCIDRStatus = (import "./servicecidrstatus.ncl").ServiceCIDRStatus,
  RBDPersistentVolumeSource = (import "./rbdpersistentvolumesource.ncl").RBDPersistentVolumeSource,
  VolumeNodeAffinity = (import "./volumenodeaffinity.ncl").VolumeNodeAffinity,
  Preconditions = (import "./preconditions.ncl").Preconditions,
  NodeRuntimeHandler = (import "./noderuntimehandler.ncl").NodeRuntimeHandler,
  CSIStorageCapacityList = (import "./csistoragecapacitylist.ncl").CSIStorageCapacityList,
  IngressLoadBalancerIngress = (import "./ingressloadbalanceringress.ncl").IngressLoadBalancerIngress,
  PodDisruptionBudget = (import "./poddisruptionbudget.ncl").PodDisruptionBudget,
  JobStatus = (import "./jobstatus.ncl").JobStatus,
  ServiceCIDRList = (import "./servicecidrlist.ncl").ServiceCIDRList,
  CSINode = (import "./csinode.ncl").CSINode,
  ReplicationControllerList = (import "./replicationcontrollerlist.ncl").ReplicationControllerList,
  CronJobSpec = (import "./cronjobspec.ncl").CronJobSpec,
  AzureDiskVolumeSource = (import "./azurediskvolumesource.ncl").AzureDiskVolumeSource,
  ScaleSpec = (import "./scalespec.ncl").ScaleSpec,
  ServiceStatus = (import "./servicestatus.ncl").ServiceStatus,
  PortworxVolumeSource = (import "./portworxvolumesource.ncl").PortworxVolumeSource,
  ConfigMapEnvSource = (import "./configmapenvsource.ncl").ConfigMapEnvSource,
  VolumeMount = (import "./volumemount.ncl").VolumeMount,
  VolumeMountStatus = (import "./volumemountstatus.ncl").VolumeMountStatus,
  HTTPIngressRuleValue = (import "./httpingressrulevalue.ncl").HTTPIngressRuleValue,
  IngressClassSpec = (import "./ingressclassspec.ncl").IngressClassSpec,
  IngressLoadBalancerStatus = (import "./ingressloadbalancerstatus.ncl").IngressLoadBalancerStatus,
  IngressSpec = (import "./ingressspec.ncl").IngressSpec,
  IngressStatus = (import "./ingressstatus.ncl").IngressStatus,
  ReplicaSet = (import "./replicaset.ncl").ReplicaSet,
  StatefulSetSpec = (import "./statefulsetspec.ncl").StatefulSetSpec,
  ReplicaSetList = (import "./replicasetlist.ncl").ReplicaSetList,
  VolumeAttachment = (import "./volumeattachment.ncl").VolumeAttachment,
  DaemonSet = (import "./daemonset.ncl").DaemonSet,
  NodeStatus = (import "./nodestatus.ncl").NodeStatus,
  APIGroup = (import "./apigroup.ncl").APIGroup,
  SleepAction = (import "./sleepaction.ncl").SleepAction,
  LabelSelectorRequirement = (import "./labelselectorrequirement.ncl").LabelSelectorRequirement,
  ReplicationController = (import "./replicationcontroller.ncl").ReplicationController,
  ServerAddressByClientCIDR = (import "./serveraddressbyclientcidr.ncl").ServerAddressByClientCIDR,
  VolumeAttachmentStatus = (import "./volumeattachmentstatus.ncl").VolumeAttachmentStatus,
  GCEPersistentDiskVolumeSource = (import "./gcepersistentdiskvolumesource.ncl").GCEPersistentDiskVolumeSource,
  AggregationRule = (import "./aggregationrule.ncl").AggregationRule,
  ComponentStatusList = (import "./componentstatuslist.ncl").ComponentStatusList,
  ResourceQuota = (import "./resourcequota.ncl").ResourceQuota,
  DeploymentList = (import "./deploymentlist.ncl").DeploymentList,
  HorizontalPodAutoscaler = (import "./horizontalpodautoscaler.ncl").HorizontalPodAutoscaler,
  CronJob = (import "./cronjob.ncl").CronJob,
  KeyToPath = (import "./keytopath.ncl").KeyToPath,
  ServiceAccountTokenProjection = (import "./serviceaccounttokenprojection.ncl").ServiceAccountTokenProjection,
  Secret = (import "./secret.ncl").Secret,
  IngressRule = (import "./ingressrule.ncl").IngressRule,
  RoleBindingList = (import "./rolebindinglist.ncl").RoleBindingList,
  PodFailurePolicy = (import "./podfailurepolicy.ncl").PodFailurePolicy,
  EventSource = (import "./eventsource.ncl").EventSource,
  Ingress = (import "./ingress.ncl").Ingress,
  SeccompProfile = (import "./seccompprofile.ncl").SeccompProfile,
  VsphereVirtualDiskVolumeSource = (import "./vspherevirtualdiskvolumesource.ncl").VsphereVirtualDiskVolumeSource,
  EndpointPort = (import "./endpointport.ncl").EndpointPort,
  CSIDriverSpec = (import "./csidriverspec.ncl").CSIDriverSpec,
  Eviction = (import "./eviction.ncl").Eviction,
  ISCSIPersistentVolumeSource = (import "./iscsipersistentvolumesource.ncl").ISCSIPersistentVolumeSource,
  PodAffinityTerm = (import "./podaffinityterm.ncl").PodAffinityTerm,
  LocalObjectReference = (import "./localobjectreference.ncl").LocalObjectReference,
  ConfigMapKeySelector = (import "./configmapkeyselector.ncl").ConfigMapKeySelector,
  PersistentVolumeClaimVolumeSource = (import "./persistentvolumeclaimvolumesource.ncl").PersistentVolumeClaimVolumeSource,
  PortStatus = (import "./portstatus.ncl").PortStatus,
  ContainerUser = (import "./containeruser.ncl").ContainerUser,
  IngressClassParametersReference = (import "./ingressclassparametersreference.ncl").IngressClassParametersReference,
  PodSecurityContext = (import "./podsecuritycontext.ncl").PodSecurityContext,
  RoleList = (import "./rolelist.ncl").RoleList,
  NFSVolumeSource = (import "./nfsvolumesource.ncl").NFSVolumeSource,
  PersistentVolumeList = (import "./persistentvolumelist.ncl").PersistentVolumeList,
  NodeRuntimeHandlerFeatures = (import "./noderuntimehandlerfeatures.ncl").NodeRuntimeHandlerFeatures,
  ParentReference = (import "./parentreference.ncl").ParentReference,
  NetworkPolicyIngressRule = (import "./networkpolicyingressrule.ncl").NetworkPolicyIngressRule,
  DeploymentStatus = (import "./deploymentstatus.ncl").DeploymentStatus,
  HorizontalPodAutoscalerSpec = (import "./horizontalpodautoscalerspec.ncl").HorizontalPodAutoscalerSpec,
  EmptyDirVolumeSource = (import "./emptydirvolumesource.ncl").EmptyDirVolumeSource,
  ConfigMapVolumeSource = (import "./configmapvolumesource.ncl").ConfigMapVolumeSource,
  ContainerStateWaiting = (import "./containerstatewaiting.ncl").ContainerStateWaiting,
  LocalVolumeSource = (import "./localvolumesource.ncl").LocalVolumeSource,
  PodDisruptionBudgetSpec = (import "./poddisruptionbudgetspec.ncl").PodDisruptionBudgetSpec,
  FieldsV1 = (import "./fieldsv1.ncl").FieldsV1,
  StatefulSetUpdateStrategy = (import "./statefulsetupdatestrategy.ncl").StatefulSetUpdateStrategy,
  PodDNSConfig = (import "./poddnsconfig.ncl").PodDNSConfig,
  NamespaceSpec = (import "./namespacespec.ncl").NamespaceSpec,
  FieldSelectorRequirement = (import "./fieldselectorrequirement.ncl").FieldSelectorRequirement,
  ReplicaSetSpec = (import "./replicasetspec.ncl").ReplicaSetSpec,
  NodeSystemInfo = (import "./nodesysteminfo.ncl").NodeSystemInfo,
  ScaleIOPersistentVolumeSource = (import "./scaleiopersistentvolumesource.ncl").ScaleIOPersistentVolumeSource,
  PodOS = (import "./podos.ncl").PodOS,
  Scale = (import "./scale.ncl").Scale,
  CephFSPersistentVolumeSource = (import "./cephfspersistentvolumesource.ncl").CephFSPersistentVolumeSource,
  ContainerState = (import "./containerstate.ncl").ContainerState,
  VolumeDevice = (import "./volumedevice.ncl").VolumeDevice,
  TopologySpreadConstraint = (import "./topologyspreadconstraint.ncl").TopologySpreadConstraint,
  CSIStorageCapacity = (import "./csistoragecapacity.ncl").CSIStorageCapacity,
  APIGroupList = (import "./apigrouplist.ncl").APIGroupList,
  CSIPersistentVolumeSource = (import "./csipersistentvolumesource.ncl").CSIPersistentVolumeSource,
  ResourceQuotaSpec = (import "./resourcequotaspec.ncl").ResourceQuotaSpec,
  NodeSwapStatus = (import "./nodeswapstatus.ncl").NodeSwapStatus,
  DaemonSetSpec = (import "./daemonsetspec.ncl").DaemonSetSpec,
  ReplicationControllerStatus = (import "./replicationcontrollerstatus.ncl").ReplicationControllerStatus,
  TCPSocketAction = (import "./tcpsocketaction.ncl").TCPSocketAction,
  ISCSIVolumeSource = (import "./iscsivolumesource.ncl").ISCSIVolumeSource,
  VolumeAttachmentSpec = (import "./volumeattachmentspec.ncl").VolumeAttachmentSpec,
  IngressPortStatus = (import "./ingressportstatus.ncl").IngressPortStatus,
  EndpointSubset = (import "./endpointsubset.ncl").EndpointSubset,
  StatefulSetStatus = (import "./statefulsetstatus.ncl").StatefulSetStatus,
  NamespaceCondition = (import "./namespacecondition.ncl").NamespaceCondition,
  ResourceHealth = (import "./resourcehealth.ncl").ResourceHealth,
  PodList = (import "./podlist.ncl").PodList,
  PodResourceClaimStatus = (import "./podresourceclaimstatus.ncl").PodResourceClaimStatus,
  TopologySelectorLabelRequirement = (import "./topologyselectorlabelrequirement.ncl").TopologySelectorLabelRequirement,
  WeightedPodAffinityTerm = (import "./weightedpodaffinityterm.ncl").WeightedPodAffinityTerm,
  HostPathVolumeSource = (import "./hostpathvolumesource.ncl").HostPathVolumeSource,
  IngressBackend = (import "./ingressbackend.ncl").IngressBackend,
  Status = (import "./status.ncl").Status,
  NetworkPolicyPort = (import "./networkpolicyport.ncl").NetworkPolicyPort,
  PodAffinity = (import "./podaffinity.ncl").PodAffinity,
  ObjectReference = (import "./objectreference.ncl").ObjectReference,
  PodTemplateList = (import "./podtemplatelist.ncl").PodTemplateList,
  StatefulSetCondition = (import "./statefulsetcondition.ncl").StatefulSetCondition,
  PersistentVolumeClaimSpec = (import "./persistentvolumeclaimspec.ncl").PersistentVolumeClaimSpec,
  ClusterRoleBinding = (import "./clusterrolebinding.ncl").ClusterRoleBinding,
  DaemonEndpoint = (import "./daemonendpoint.ncl").DaemonEndpoint,
  Container = (import "./container.ncl").Container,
  PodAntiAffinity = (import "./podantiaffinity.ncl").PodAntiAffinity,
  ProjectedVolumeSource = (import "./projectedvolumesource.ncl").ProjectedVolumeSource,
  StorageOSPersistentVolumeSource = (import "./storageospersistentvolumesource.ncl").StorageOSPersistentVolumeSource,
  RoleBinding = (import "./rolebinding.ncl").RoleBinding,
  HostAlias = (import "./hostalias.ncl").HostAlias,
  ImageVolumeSource = (import "./imagevolumesource.ncl").ImageVolumeSource,
  NodeConfigStatus = (import "./nodeconfigstatus.ncl").NodeConfigStatus,
  CSINodeList = (import "./csinodelist.ncl").CSINodeList,
  StatefulSetPersistentVolumeClaimRetentionPolicy = (import "./statefulsetpersistentvolumeclaimretentionpolicy.ncl").StatefulSetPersistentVolumeClaimRetentionPolicy,
  StatefulSet = (import "./statefulset.ncl").StatefulSet,
  PodFailurePolicyOnExitCodesRequirement = (import "./podfailurepolicyonexitcodesrequirement.ncl").PodFailurePolicyOnExitCodesRequirement,
  CSINodeSpec = (import "./csinodespec.ncl").CSINodeSpec,
  NetworkPolicyEgressRule = (import "./networkpolicyegressrule.ncl").NetworkPolicyEgressRule,
  PodTemplate = (import "./podtemplate.ncl").PodTemplate,
  EndpointAddress = (import "./endpointaddress.ncl").EndpointAddress,
  PodResourceClaim = (import "./podresourceclaim.ncl").PodResourceClaim,
  GRPCAction = (import "./grpcaction.ncl").GRPCAction,
  PodReadinessGate = (import "./podreadinessgate.ncl").PodReadinessGate,
  GlusterfsVolumeSource = (import "./glusterfsvolumesource.ncl").GlusterfsVolumeSource,
  ClusterRoleBindingList = (import "./clusterrolebindinglist.ncl").ClusterRoleBindingList,
  CephFSVolumeSource = (import "./cephfsvolumesource.ncl").CephFSVolumeSource,
  ContainerStatus = (import "./containerstatus.ncl").ContainerStatus,
  ResourceStatus = (import "./resourcestatus.ncl").ResourceStatus,
  NamespaceStatus = (import "./namespacestatus.ncl").NamespaceStatus,
  ReplicaSetStatus = (import "./replicasetstatus.ncl").ReplicaSetStatus,
  Event = (import "./event.ncl").Event,
  HTTPGetAction = (import "./httpgetaction.ncl").HTTPGetAction,
  IPAddressList = (import "./ipaddresslist.ncl").IPAddressList,
  ServiceCIDR = (import "./servicecidr.ncl").ServiceCIDR,
  HorizontalPodAutoscalerStatus = (import "./horizontalpodautoscalerstatus.ncl").HorizontalPodAutoscalerStatus,
  VolumeNodeResources = (import "./volumenoderesources.ncl").VolumeNodeResources,
  Toleration = (import "./toleration.ncl").Toleration,
  ScopedResourceSelectorRequirement = (import "./scopedresourceselectorrequirement.ncl").ScopedResourceSelectorRequirement,
  ComponentStatus = (import "./componentstatus.ncl").ComponentStatus,
  ContainerPort = (import "./containerport.ncl").ContainerPort,
  ResourceQuotaStatus = (import "./resourcequotastatus.ncl").ResourceQuotaStatus,
  SecretVolumeSource = (import "./secretvolumesource.ncl").SecretVolumeSource,
  ServiceCIDRSpec = (import "./servicecidrspec.ncl").ServiceCIDRSpec,
  Patch = (import "./patch.ncl").Patch,
  CSIVolumeSource = (import "./csivolumesource.ncl").CSIVolumeSource,
  FlexVolumeSource = (import "./flexvolumesource.ncl").FlexVolumeSource,
  IPAddress = (import "./ipaddress.ncl").IPAddress,
  JobTemplateSpec = (import "./jobtemplatespec.ncl").JobTemplateSpec,
  APIVersions = (import "./apiversions.ncl").APIVersions,
  ContainerResizePolicy = (import "./containerresizepolicy.ncl").ContainerResizePolicy,
  TypedObjectReference = (import "./typedobjectreference.ncl").TypedObjectReference,
  Subject = (import "./subject.ncl").Subject,
  GlusterfsPersistentVolumeSource = (import "./glusterfspersistentvolumesource.ncl").GlusterfsPersistentVolumeSource,
  TypedLocalObjectReference = (import "./typedlocalobjectreference.ncl").TypedLocalObjectReference,
  PodFailurePolicyOnPodConditionsPattern = (import "./podfailurepolicyonpodconditionspattern.ncl").PodFailurePolicyOnPodConditionsPattern,
  CSINodeDriver = (import "./csinodedriver.ncl").CSINodeDriver,
  NetworkPolicyList = (import "./networkpolicylist.ncl").NetworkPolicyList,
  ClientIPConfig = (import "./clientipconfig.ncl").ClientIPConfig,
  NetworkPolicyPeer = (import "./networkpolicypeer.ncl").NetworkPolicyPeer,
  HorizontalPodAutoscalerList = (import "./horizontalpodautoscalerlist.ncl").HorizontalPodAutoscalerList,
  PodCondition = (import "./podcondition.ncl").PodCondition,
  DownwardAPIVolumeFile = (import "./downwardapivolumefile.ncl").DownwardAPIVolumeFile,
  VolumeError = (import "./volumeerror.ncl").VolumeError,
  NodeSelectorTerm = (import "./nodeselectorterm.ncl").NodeSelectorTerm,
  DeleteOptions = (import "./deleteoptions.ncl").DeleteOptions,
  DeploymentCondition = (import "./deploymentcondition.ncl").DeploymentCondition,
  PolicyRule = (import "./policyrule.ncl").PolicyRule,
  Endpoints = (import "./endpoints.ncl").Endpoints,
  DaemonSetList = (import "./daemonsetlist.ncl").DaemonSetList,
  RollingUpdateStatefulSetStrategy = (import "./rollingupdatestatefulsetstrategy.ncl").RollingUpdateStatefulSetStrategy,
  SuccessPolicy = (import "./successpolicy.ncl").SuccessPolicy,
  Taint = (import "./taint.ncl").Taint,
  IngressTLS = (import "./ingresstls.ncl").IngressTLS,
}
